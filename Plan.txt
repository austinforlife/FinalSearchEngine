Descriptions of roles, specification of work to be done, description of the unit tests, list of classes and interfaces to be written. 
This should be submitted during discussion section on paper, and also in a group GitHub Repo shared with the professor and TA. 
In the case of needing extra tools, initial research on sample code (for web server, for parsers etc) should also be evident by 5 December.

NAME					GITHUB				PARTNER				TASK (from list of suggestions)
Mary Feng				maryfeng			Xiaomeng Yang		3, 2 (>, <)
Austin Washburn			austinforlife		Khashi Reyes		5, 2 
Khashi (Paul) Reyes		KhashiReyes			Austin Washburn		1, 2
Xiaomeng Yang			maggieyang829		Xiaomeng Yang		4, 2 (>, <)

~~ Priorities ~~
Importance: Designing these classes and tests will help Xiaomeng and Mary when they move 
forward in designing the combo searches. We are trying to follow TDD as closely as possible.
2.) 
---Greater-than: 
Class: Make new class called GreaterThan. 
Method: greaterThan returns a list of Fields whose Field values are alphabetically
larger than the Field value specified in FieldSearch.
Test 1:
Load in some data. Make new Field and FieldSearch objects. Use method greaterThan on the
FieldSearch object. Use an assertEquals statement to check that the number of Fields
returned equals the correct amount from the data. 
Test 2:
Similar to test 1. Use the greaterThan method on a FieldSearch object, and use an
assertEquals statement to check that the Field values returned are the ones alphabetically
larger than the Field value specified in the FieldSearch object.
---Less-than:
Same as Greater-than above, but with Less-than. 

(Austin and Khashi)
---Suffix, Prefix, Contains:
Design: Create a class and interface for each of these searches, where the interface is a 
contract between the FieldSearch class and the appropriate search class. 

Principles:This satisfies the SRP by assuring the FieldSearch doesn't need to change when the searches change. It also satisfies the
DIP because the special search classes will be implemented based on what FieldSearch dictates. It also
satisfies the ISP, by ensuring each special search doesn't depend on all of the other special searches.
The OCP is also satisfied by this design.

Roles: Austin will design and implement the classes and the interfaces (likely with help from Khashi), and Khashi 
will design and implement unit tests (done by communication with Austin). The tests will assure Austin is
properly designing and implementing his code. We plan to write tests in parallel with code before moving on.

Unit Test: Add input into the database and check to see if our code returns the proper results based on the search
description. We will add tests for ensuring the Iterator is working properly once we begin writing code for that.

Research: Typical research involved with development.


3.) Combinations of searches
Class: Make a new class, ComboSearch.  
Method: andSearch takes 2 FieldSearch objects as input and returns a list of identifiers 
that satisfies the intersection of the two types of searches. Similarly, orSearch takes
2 FieldSearch objects as input and returns a list of identifiers which satisfies the
union of the two types of searches.
Test 1:
Put in some data. Make two FieldSearch objects as input for the andSearch method. 
Use an assertEquals statement to check that the number of identifiers returned equals 
the number of identifiers that match both the first and second FieldSearches.
Test 2:
Put in some data. Make two FieldSearch objects as input for the orSearch method. 
Use an assertEquals statement to check that the number of identifiers returned equals 
the number of identifiers that match the first FieldSearch + the number of identifiers 
that match the second FieldSearch - the number of identifiers that match both FieldSearches.

4.) String Parsing
Class: make a new class StringParser.
Method: 1 parseString takes one string as input and returns a list of substrings split by quotes and commas.
2 performSearch: Based on the kind of search it wants, it passes the field name and value to relevant search class.
Test 1: Give a long string to the parseString method and assertEquals to see if the list returned can match
Test 2: Using the result of parseString and let performSearch find the result. Using assertEquals to check if the
value returned matches with the correct result.

We have decided to use Single Responsibility principle, Open/Close principle in our implementation.
We implement SRP by making a new class for each additional type of search or new feature. In this way, each class
only has one responsibility. 
We follow open close principle by opening for extention but closed for modification in StringParser class.
We will make an interface for different kinds of searches, and all the searches will inplement the interface.

1.) Iterators (Austin and Khashi)
Design: Implement Java's iterator interface with FieldSearch, while FieldSearch dictates how each special
search class implements it's iterator. 

Principles: This satisfies the DIP ensuring that the special search classes depend upon the abstractions in 
FieldSearch and not the other way around. This idea follows from OCP, again reassuring that FieldSearch isn't 
changed based on what the special search classes are doing.

Unit tests: Our tests will use the already written tests for the special search classes. This tests not only
valid output, but also tests that the iterator is returned correctly for each special search.

Research: Typical research.

Roles: Khashi - Iterator interface and change functions of special search classes. Austin - unit tests.

5.) Server (Austin and Khashi)






